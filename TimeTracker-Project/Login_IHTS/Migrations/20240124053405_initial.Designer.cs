// <auto-generated />
using System;
using API_TimeTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_TimeTracker.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240124053405_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API_TimeTracker.Models.LocationModel", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LOCATIONID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LOCATIONNAME");

                    b.HasKey("LocationId");

                    b.ToTable("LOCATIONS");
                });

            modelBuilder.Entity("API_TimeTracker.Models.ProjectModel", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PROJECTNAMEID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PROJECTNAME");

                    b.HasKey("ProjectId");

                    b.ToTable("PROJECTNAMES");
                });

            modelBuilder.Entity("API_TimeTracker.Models.TaskModel", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LOCATIONID");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("PROJECTNAMEID");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATIONDATE");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TASKDESCRIPTION");

                    b.Property<int>("TimePeriodId")
                        .HasColumnType("int")
                        .HasColumnName("TIMEPERIODID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USERID");

                    b.Property<string>("UserStoryBugNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USERSTORYORBUGNO");

                    b.HasKey("TaskId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TimePeriodId");

                    b.HasIndex("UserId");

                    b.ToTable("TASKDETAILS");
                });

            modelBuilder.Entity("API_TimeTracker.Models.TimePeriodModel", b =>
                {
                    b.Property<int>("TimePeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TIMESLOTID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimePeriodId"));

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("ENDTIME");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("STARTTIME");

                    b.HasKey("TimePeriodId");

                    b.ToTable("TIMESLOTS");
                });

            modelBuilder.Entity("API_TimeTracker.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("USERID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USERNAME");

                    b.HasKey("UserId");

                    b.ToTable("USERDETAILS");
                });

            modelBuilder.Entity("API_TimeTracker.Models.TaskModel", b =>
                {
                    b.HasOne("API_TimeTracker.Models.LocationModel", "Location")
                        .WithMany("LocationTasks")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_TimeTracker.Models.ProjectModel", "Project")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_TimeTracker.Models.TimePeriodModel", "TimePeriod")
                        .WithMany("TimePeriodTasks")
                        .HasForeignKey("TimePeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_TimeTracker.Models.User", "User")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Project");

                    b.Navigation("TimePeriod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API_TimeTracker.Models.LocationModel", b =>
                {
                    b.Navigation("LocationTasks");
                });

            modelBuilder.Entity("API_TimeTracker.Models.ProjectModel", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("API_TimeTracker.Models.TimePeriodModel", b =>
                {
                    b.Navigation("TimePeriodTasks");
                });

            modelBuilder.Entity("API_TimeTracker.Models.User", b =>
                {
                    b.Navigation("UserTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
